@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

@use './components/text';
@use './mq';
@use './functions' as *;
@use './variables' as *;

$bp-xl: map-get($breakpoints, 'xl');
$bp-lg: map-get($breakpoints, 'lg');
$bp-md: map-get($breakpoints, 'md');
$bp-sm: map-get($breakpoints, 'sm');
$bp-xs: map-get($breakpoints, 'xs');

$queries: (
    '< xs': '(max-width: #{$bp-xs - 1})',
    'xs': '(min-width: #{$bp-xs})',
    'xs!': '(min-width: #{$bp-xs}) and max-width: #{$bp-sm - 1})',

    '< sm': '(max-width: #{$bp-sm - 1})',
    'sm': '(min-width: #{$bp-sm})',
    'sm!': '(min-width: #{$bp-sm}) and (max-width: #{$bp-md - 1})',

    '< md': '(max-width: #{$bp-md - 1})',
    'md': '(min-width: #{$bp-md})',
    'md!': '(min-width: #{$bp-md}) and (max-width: #{$bp-lg - 1})',

    '< lg': '(max-width: #{$bp-lg - 1})',
    'lg': '(min-width: #{$bp-lg})',
    'lg!': '(min-width: #{$bp-lg}) and (max-width: #{$bp-xl - 1})',

    '< xl': '(max-width: #{$bp-xl - 1})',
    'xl': '(min-width: #{$bp-xl})'
);

@mixin mq($bp) {
    $query: map-get($queries, $bp);
    
    @if not $bp {
        @error 'Invalid breakpoint';
    } @else {
        @media #{$query} {
            @content;
        }
    }
}

@mixin breakpoint($bp) {
	@media (max-width: $bp) {
		@content;
	}
}

@mixin caption($text, $position: after) {
    &::#{$position} {
        content: '';
        @include text.handwritten;
        
        @content;
    }
}

@mixin decoration($path, $position: after) {
    &::#{$position} {
        content: '';
        position: absolute;
        background-image: image('#{$path}');
        background-position: center;
        background-size: contain;
        background-repeat: no-repeat;
        @content;
    }
}

@mixin fill {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

@mixin placeholder-color($color) {
    &::-webkit-input-placeholder {
        color: $color;
    }

    &:-moz-placeholder {
        color: $color;  
    }

    &::-moz-placeholder {
        color: $color;  
    }

    &:-ms-input-placeholder {  
        color:$color;  
    }
}

@mixin border-radius($dirs: ()) {
    @if list.length($dirs) > 0 {
        @each $dir in $dirs {
            @include mq.to(lg) {
                border-#{$dir}-radius: $border-radius-sm;
            }
            
            @include mq.from(lg) {
                border-#{$dir}-radius: $border-radius-md;
            }
        }
    } @else {
        @include mq.to(lg) {
            border-radius: $border-radius-sm;
        }
        
        @include mq.from(lg) {
            border-radius: $border-radius-md;
        }
    }
}

@mixin hover-active($styles: ()) {
	transition: 0.3s ease all;

	&:hover {
		@each $property, $value in $styles {
            @if (meta.type-of($value) == color) {
                #{$property}: lighten($value, 5%);
            } @else {
                #{$property}: $value;
            }
		}
	}

	&:active {
		@each $property, $value in $styles {
            @if (meta.type-of($value) == 'color') {
                #{$property}: darken($value, 5%);
            } @else {
                #{$property}: $value;
            }
		}
	}
}

@mixin raised() {
    $color: rgba(0,0,0,.15);
    
    -webkit-box-shadow: 0 1px 5px rgba(0,0,0,.15), 0 1px 5px 1px rgba(0,0,0,.15);
    box-shadow: 0 1px 5px rgba(0,0,0,.15), 0 1px 5px 1px rgba(0,0,0,.15);
    -webkit-transition: background-color .3s cubic-bezier(.4,0,.2,1),box-shadow .3s cubic-bezier(.4,0,.2,1);
    transition: background-color .3s cubic-bezier(.4,0,.2,1),box-shadow .3s cubic-bezier(.4,0,.2,1);
    -ms-user-select: none;
    
    &:hover {
        outline: 0;
        text-decoration: none;
        -webkit-box-shadow: 0 1px 5px rgba(0,0,0,.15), 0 5px 10px 1px rgba(0,0,0,.3), 0 10px 30px rgba(0,0,0,.15);
        box-shadow: 0 1px 5px rgba(0,0,0,.15), 0 5px 10px 1px rgba(0,0,0,.3), 0 10px 30px rgba(0,0,0,.15);
    }
}

@mixin scroll-x($offset: 30px, $scrollbar: false) {
    --offset: #{$offset};

    width: calc(100% + var(--offset) * 2);
    margin-left: calc(var(--offset) * -1);
    margin-right: calc(var(--offset) * -1);
    padding-left: var(--offset);
    padding-right: var(--offset);
    overflow-x: auto;

    @if not $scrollbar {
        &::-webkit-scrollbar {
            display: none;
        }
    }

    @include mq.to(lg) {
        --offset: 45px;
    }

    @include mq.to(md) {
        --offset: 30px;
    }
}

@mixin scroll-y($fade: true, $color: $linen) {
    overflow: auto;

    @if ($fade) {
        padding-bottom: 25px;

        &::after {
            content: '';
            width: calc(100% - 3px);
            height: 25px;
            position: absolute;
            bottom: 0;
            left: 0;
            box-shadow: 0px -30px 20px -10px $white inset;
            border-radius: 0 0 $border-radius-sm $border-radius-sm;
        }
    }

    &::-webkit-scrollbar {
        width: 3px;
    }

    &::-webkit-scrollbar-thumb {
        background: $color;
        border-radius: 10%;
    }
}